#pragma once
#include <eosio/testing/tester.hpp>

#define CORE_SYM_NAME "SYS"
#define CORE_SYM_PRECISION 4

#define _STRINGIZE1(x) #x
#define _STRINGIZE2(x) _STRINGIZE1(x)

#define CORE_SYM_STR (_STRINGIZE2(CORE_SYM_PRECISION) "," CORE_SYM_NAME)
#define CORE_SYM (::eosio::chain::string_to_symbol_c(CORE_SYM_PRECISION, CORE_SYM_NAME))

struct core_sym {
    static inline eosio::chain::asset from_string(const std::string& s) {
        return eosio::chain::asset::from_string(s + " " CORE_SYM_NAME);
    }
};

namespace eosio {
namespace testing {

struct contracts {

    static std::vector<uint8_t> eosio_boot_wasm() { return read_wasm("${ANTELOPE_CONTRACTS_SOURCE_DIR}/eosio.boot/eosio.boot.wasm"); }
    static std::vector<char> eosio_boot_abi() { return read_abi("${ANTELOPE_CONTRACTS_SOURCE_DIR}/eosio.boot/eosio.boot.abi"); }

    static std::vector<uint8_t> eosio_token_wasm() { return read_wasm("${ANTELOPE_CONTRACTS_SOURCE_DIR}/eosio.token/eosio.token.wasm"); }
    static std::vector<char> eosio_token_abi() { return read_abi("${ANTELOPE_CONTRACTS_SOURCE_DIR}/eosio.token/eosio.token.abi"); }

    static std::vector<uint8_t> evm_stub_wasm() { return read_wasm("${ANTELOPE_CONTRACTS_BINARY_DIR}/stubs/stub_evm_runtime.wasm"); }
    static std::vector<char> evm_stub_abi() { return read_abi("${ANTELOPE_CONTRACTS_BINARY_DIR}/stubs/stub_evm_runtime.abi"); }

    static std::vector<uint8_t> evm_wasm() { return read_wasm("${eosevm_DIR}/evm_runtime/evm_runtime.wasm"); }
    static std::vector<char> evm_abi() { return read_abi("${eosevm_DIR}/evm_runtime/evm_runtime.abi"); }

    static std::vector<uint8_t> evmutil_wasm() { return read_wasm("${ANTELOPE_CONTRACTS_BINARY_DIR}/evmutil/evmutil.wasm"); }
    static std::vector<char> evmutil_abi() { return read_abi("${ANTELOPE_CONTRACTS_BINARY_DIR}/evmutil/evmutil.abi"); }

    static std::vector<uint8_t> evm_stub_endrmng_wasm() { return read_wasm("${ANTELOPE_CONTRACTS_BINARY_DIR}/stubs/stub_endrmng.wasm"); }
    static std::vector<char> evm_stub_endrmng_abi() { return read_abi("${ANTELOPE_CONTRACTS_BINARY_DIR}/stubs/stub_endrmng.abi"); }
};
}  // namespace testing
}  // namespace eosio
