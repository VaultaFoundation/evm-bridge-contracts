#pragma once
#include <eosio/testing/tester.hpp>

#define CORE_SYM_NAME "SYS"
#define CORE_SYM_PRECISION 4

#define _STRINGIZE1(x) #x
#define _STRINGIZE2(x) _STRINGIZE1(x)

#define CORE_SYM_STR ( _STRINGIZE2(CORE_SYM_PRECISION) "," CORE_SYM_NAME )
#define CORE_SYM  ( ::eosio::chain::string_to_symbol_c( CORE_SYM_PRECISION, CORE_SYM_NAME ) )

struct core_sym {
   static inline eosio::chain::asset from_string(const std::string& s) {
      return eosio::chain::asset::from_string(s + " " CORE_SYM_NAME);
   }
};

namespace eosio { namespace testing {

struct contracts {
   static std::vector<uint8_t> eosio_token_wasm() { return read_wasm("${CMAKE_CURRENT_SOURCE_DIR}/contracts/eosio.token/eosio.token.wasm"); }
   static std::vector<char>    eosio_token_abi() { return read_abi("${CMAKE_CURRENT_SOURCE_DIR}/contracts/eosio.token/eosio.token.abi"); }

   static std::vector<uint8_t> erc2o_wasm() { return read_wasm("${CMAKE_CURRENT_BINARY_DIR}/../erc2o.wasm"); }
   static std::vector<char>    erc2o_abi() { return read_abi("${CMAKE_CURRENT_BINARY_DIR}/../erc2o.abi"); }
}; 
}} //ns eosio::testing